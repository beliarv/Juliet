// NOTE - eventually this file will be automatically updated using a Perl script that understand
// the naming of test case files, functions, and namespaces.

#ifndef _TESTCASES_H
#define _TESTCASES_H

#ifdef __cplusplus
extern "C" {
#endif

// declare C good and bad functions
#ifndef OMITGOOD
	/* BEGIN-AUTOGENERATED-C-GOOD-FUNCTION-DECLARATIONS */
	void CWE398_Poor_Code_Quality__addition_01_good();

	void CWE398_Poor_Code_Quality__addition_02_good();

	void CWE398_Poor_Code_Quality__addition_03_good();

	void CWE398_Poor_Code_Quality__addition_04_good();

	void CWE398_Poor_Code_Quality__addition_05_good();

	void CWE398_Poor_Code_Quality__addition_06_good();

	void CWE398_Poor_Code_Quality__addition_07_good();

	void CWE398_Poor_Code_Quality__addition_08_good();

	void CWE398_Poor_Code_Quality__addition_09_good();

	void CWE398_Poor_Code_Quality__addition_10_good();

	void CWE398_Poor_Code_Quality__addition_11_good();

	void CWE398_Poor_Code_Quality__addition_12_good();

	void CWE398_Poor_Code_Quality__addition_13_good();

	void CWE398_Poor_Code_Quality__addition_14_good();

	void CWE398_Poor_Code_Quality__addition_15_good();

	void CWE398_Poor_Code_Quality__addition_16_good();

	void CWE398_Poor_Code_Quality__addition_17_good();

	void CWE398_Poor_Code_Quality__addition_18_good();

	void CWE398_Poor_Code_Quality__empty_block_01_good();

	void CWE398_Poor_Code_Quality__empty_block_02_good();

	void CWE398_Poor_Code_Quality__empty_block_03_good();

	void CWE398_Poor_Code_Quality__empty_block_04_good();

	void CWE398_Poor_Code_Quality__empty_block_05_good();

	void CWE398_Poor_Code_Quality__empty_block_06_good();

	void CWE398_Poor_Code_Quality__empty_block_07_good();

	void CWE398_Poor_Code_Quality__empty_block_08_good();

	void CWE398_Poor_Code_Quality__empty_block_09_good();

	void CWE398_Poor_Code_Quality__empty_block_10_good();

	void CWE398_Poor_Code_Quality__empty_block_11_good();

	void CWE398_Poor_Code_Quality__empty_block_12_good();

	void CWE398_Poor_Code_Quality__empty_block_13_good();

	void CWE398_Poor_Code_Quality__empty_block_14_good();

	void CWE398_Poor_Code_Quality__empty_block_15_good();

	void CWE398_Poor_Code_Quality__empty_block_16_good();

	void CWE398_Poor_Code_Quality__empty_block_17_good();

	void CWE398_Poor_Code_Quality__empty_block_18_good();

	void CWE398_Poor_Code_Quality__empty_case_01_good();

	void CWE398_Poor_Code_Quality__empty_case_02_good();

	void CWE398_Poor_Code_Quality__empty_case_03_good();

	void CWE398_Poor_Code_Quality__empty_case_04_good();

	void CWE398_Poor_Code_Quality__empty_case_05_good();

	void CWE398_Poor_Code_Quality__empty_case_06_good();

	void CWE398_Poor_Code_Quality__empty_case_07_good();

	void CWE398_Poor_Code_Quality__empty_case_08_good();

	void CWE398_Poor_Code_Quality__empty_case_09_good();

	void CWE398_Poor_Code_Quality__empty_case_10_good();

	void CWE398_Poor_Code_Quality__empty_case_11_good();

	void CWE398_Poor_Code_Quality__empty_case_12_good();

	void CWE398_Poor_Code_Quality__empty_case_13_good();

	void CWE398_Poor_Code_Quality__empty_case_14_good();

	void CWE398_Poor_Code_Quality__empty_case_15_good();

	void CWE398_Poor_Code_Quality__empty_case_16_good();

	void CWE398_Poor_Code_Quality__empty_case_17_good();

	void CWE398_Poor_Code_Quality__empty_case_18_good();

	void CWE398_Poor_Code_Quality__empty_else_01_good();

	void CWE398_Poor_Code_Quality__empty_else_02_good();

	void CWE398_Poor_Code_Quality__empty_else_03_good();

	void CWE398_Poor_Code_Quality__empty_else_04_good();

	void CWE398_Poor_Code_Quality__empty_else_05_good();

	void CWE398_Poor_Code_Quality__empty_else_06_good();

	void CWE398_Poor_Code_Quality__empty_else_07_good();

	void CWE398_Poor_Code_Quality__empty_else_08_good();

	void CWE398_Poor_Code_Quality__empty_else_09_good();

	void CWE398_Poor_Code_Quality__empty_else_10_good();

	void CWE398_Poor_Code_Quality__empty_else_11_good();

	void CWE398_Poor_Code_Quality__empty_else_12_good();

	void CWE398_Poor_Code_Quality__empty_else_13_good();

	void CWE398_Poor_Code_Quality__empty_else_14_good();

	void CWE398_Poor_Code_Quality__empty_else_15_good();

	void CWE398_Poor_Code_Quality__empty_else_16_good();

	void CWE398_Poor_Code_Quality__empty_else_17_good();

	void CWE398_Poor_Code_Quality__empty_else_18_good();

	void CWE398_Poor_Code_Quality__empty_for_01_good();

	void CWE398_Poor_Code_Quality__empty_for_02_good();

	void CWE398_Poor_Code_Quality__empty_for_03_good();

	void CWE398_Poor_Code_Quality__empty_for_04_good();

	void CWE398_Poor_Code_Quality__empty_for_05_good();

	void CWE398_Poor_Code_Quality__empty_for_06_good();

	void CWE398_Poor_Code_Quality__empty_for_07_good();

	void CWE398_Poor_Code_Quality__empty_for_08_good();

	void CWE398_Poor_Code_Quality__empty_for_09_good();

	void CWE398_Poor_Code_Quality__empty_for_10_good();

	void CWE398_Poor_Code_Quality__empty_for_11_good();

	void CWE398_Poor_Code_Quality__empty_for_12_good();

	void CWE398_Poor_Code_Quality__empty_for_13_good();

	void CWE398_Poor_Code_Quality__empty_for_14_good();

	void CWE398_Poor_Code_Quality__empty_for_15_good();

	void CWE398_Poor_Code_Quality__empty_for_16_good();

	void CWE398_Poor_Code_Quality__empty_for_17_good();

	void CWE398_Poor_Code_Quality__empty_for_18_good();

	void CWE398_Poor_Code_Quality__empty_function_01_good();

	void CWE398_Poor_Code_Quality__empty_if_01_good();

	void CWE398_Poor_Code_Quality__empty_if_02_good();

	void CWE398_Poor_Code_Quality__empty_if_03_good();

	void CWE398_Poor_Code_Quality__empty_if_04_good();

	void CWE398_Poor_Code_Quality__empty_if_05_good();

	void CWE398_Poor_Code_Quality__empty_if_06_good();

	void CWE398_Poor_Code_Quality__empty_if_07_good();

	void CWE398_Poor_Code_Quality__empty_if_08_good();

	void CWE398_Poor_Code_Quality__empty_if_09_good();

	void CWE398_Poor_Code_Quality__empty_if_10_good();

	void CWE398_Poor_Code_Quality__empty_if_11_good();

	void CWE398_Poor_Code_Quality__empty_if_12_good();

	void CWE398_Poor_Code_Quality__empty_if_13_good();

	void CWE398_Poor_Code_Quality__empty_if_14_good();

	void CWE398_Poor_Code_Quality__empty_if_15_good();

	void CWE398_Poor_Code_Quality__empty_if_16_good();

	void CWE398_Poor_Code_Quality__empty_if_17_good();

	void CWE398_Poor_Code_Quality__empty_if_18_good();

	void CWE398_Poor_Code_Quality__empty_while_01_good();

	void CWE398_Poor_Code_Quality__empty_while_02_good();

	void CWE398_Poor_Code_Quality__empty_while_03_good();

	void CWE398_Poor_Code_Quality__empty_while_04_good();

	void CWE398_Poor_Code_Quality__empty_while_05_good();

	void CWE398_Poor_Code_Quality__empty_while_06_good();

	void CWE398_Poor_Code_Quality__empty_while_07_good();

	void CWE398_Poor_Code_Quality__empty_while_08_good();

	void CWE398_Poor_Code_Quality__empty_while_09_good();

	void CWE398_Poor_Code_Quality__empty_while_10_good();

	void CWE398_Poor_Code_Quality__empty_while_11_good();

	void CWE398_Poor_Code_Quality__empty_while_12_good();

	void CWE398_Poor_Code_Quality__empty_while_13_good();

	void CWE398_Poor_Code_Quality__empty_while_14_good();

	void CWE398_Poor_Code_Quality__empty_while_15_good();

	void CWE398_Poor_Code_Quality__empty_while_16_good();

	void CWE398_Poor_Code_Quality__empty_while_17_good();

	void CWE398_Poor_Code_Quality__empty_while_18_good();

	void CWE398_Poor_Code_Quality__equals_01_good();

	void CWE398_Poor_Code_Quality__equals_02_good();

	void CWE398_Poor_Code_Quality__equals_03_good();

	void CWE398_Poor_Code_Quality__equals_04_good();

	void CWE398_Poor_Code_Quality__equals_05_good();

	void CWE398_Poor_Code_Quality__equals_06_good();

	void CWE398_Poor_Code_Quality__equals_07_good();

	void CWE398_Poor_Code_Quality__equals_08_good();

	void CWE398_Poor_Code_Quality__equals_09_good();

	void CWE398_Poor_Code_Quality__equals_10_good();

	void CWE398_Poor_Code_Quality__equals_11_good();

	void CWE398_Poor_Code_Quality__equals_12_good();

	void CWE398_Poor_Code_Quality__equals_13_good();

	void CWE398_Poor_Code_Quality__equals_14_good();

	void CWE398_Poor_Code_Quality__equals_15_good();

	void CWE398_Poor_Code_Quality__equals_16_good();

	void CWE398_Poor_Code_Quality__equals_17_good();

	void CWE398_Poor_Code_Quality__equals_18_good();

	void CWE398_Poor_Code_Quality__five_01_good();

	void CWE398_Poor_Code_Quality__five_02_good();

	void CWE398_Poor_Code_Quality__five_03_good();

	void CWE398_Poor_Code_Quality__five_04_good();

	void CWE398_Poor_Code_Quality__five_05_good();

	void CWE398_Poor_Code_Quality__five_06_good();

	void CWE398_Poor_Code_Quality__five_07_good();

	void CWE398_Poor_Code_Quality__five_08_good();

	void CWE398_Poor_Code_Quality__five_09_good();

	void CWE398_Poor_Code_Quality__five_10_good();

	void CWE398_Poor_Code_Quality__five_11_good();

	void CWE398_Poor_Code_Quality__five_12_good();

	void CWE398_Poor_Code_Quality__five_13_good();

	void CWE398_Poor_Code_Quality__five_14_good();

	void CWE398_Poor_Code_Quality__five_15_good();

	void CWE398_Poor_Code_Quality__five_16_good();

	void CWE398_Poor_Code_Quality__five_17_good();

	void CWE398_Poor_Code_Quality__five_18_good();

	void CWE398_Poor_Code_Quality__semicolon_01_good();

	void CWE398_Poor_Code_Quality__semicolon_02_good();

	void CWE398_Poor_Code_Quality__semicolon_03_good();

	void CWE398_Poor_Code_Quality__semicolon_04_good();

	void CWE398_Poor_Code_Quality__semicolon_05_good();

	void CWE398_Poor_Code_Quality__semicolon_06_good();

	void CWE398_Poor_Code_Quality__semicolon_07_good();

	void CWE398_Poor_Code_Quality__semicolon_08_good();

	void CWE398_Poor_Code_Quality__semicolon_09_good();

	void CWE398_Poor_Code_Quality__semicolon_10_good();

	void CWE398_Poor_Code_Quality__semicolon_11_good();

	void CWE398_Poor_Code_Quality__semicolon_12_good();

	void CWE398_Poor_Code_Quality__semicolon_13_good();

	void CWE398_Poor_Code_Quality__semicolon_14_good();

	void CWE398_Poor_Code_Quality__semicolon_15_good();

	void CWE398_Poor_Code_Quality__semicolon_16_good();

	void CWE398_Poor_Code_Quality__semicolon_17_good();

	void CWE398_Poor_Code_Quality__semicolon_18_good();

	/* END-AUTOGENERATED-C-GOOD-FUNCTION-DECLARATIONS */
#endif // OMITGOOD


#ifndef OMITBAD
	/* BEGIN-AUTOGENERATED-C-BAD-FUNCTION-DECLARATIONS */
	void CWE398_Poor_Code_Quality__addition_01_bad();

	void CWE398_Poor_Code_Quality__addition_02_bad();

	void CWE398_Poor_Code_Quality__addition_03_bad();

	void CWE398_Poor_Code_Quality__addition_04_bad();

	void CWE398_Poor_Code_Quality__addition_05_bad();

	void CWE398_Poor_Code_Quality__addition_06_bad();

	void CWE398_Poor_Code_Quality__addition_07_bad();

	void CWE398_Poor_Code_Quality__addition_08_bad();

	void CWE398_Poor_Code_Quality__addition_09_bad();

	void CWE398_Poor_Code_Quality__addition_10_bad();

	void CWE398_Poor_Code_Quality__addition_11_bad();

	void CWE398_Poor_Code_Quality__addition_12_bad();

	void CWE398_Poor_Code_Quality__addition_13_bad();

	void CWE398_Poor_Code_Quality__addition_14_bad();

	void CWE398_Poor_Code_Quality__addition_15_bad();

	void CWE398_Poor_Code_Quality__addition_16_bad();

	void CWE398_Poor_Code_Quality__addition_17_bad();

	void CWE398_Poor_Code_Quality__addition_18_bad();

	void CWE398_Poor_Code_Quality__empty_block_01_bad();

	void CWE398_Poor_Code_Quality__empty_block_02_bad();

	void CWE398_Poor_Code_Quality__empty_block_03_bad();

	void CWE398_Poor_Code_Quality__empty_block_04_bad();

	void CWE398_Poor_Code_Quality__empty_block_05_bad();

	void CWE398_Poor_Code_Quality__empty_block_06_bad();

	void CWE398_Poor_Code_Quality__empty_block_07_bad();

	void CWE398_Poor_Code_Quality__empty_block_08_bad();

	void CWE398_Poor_Code_Quality__empty_block_09_bad();

	void CWE398_Poor_Code_Quality__empty_block_10_bad();

	void CWE398_Poor_Code_Quality__empty_block_11_bad();

	void CWE398_Poor_Code_Quality__empty_block_12_bad();

	void CWE398_Poor_Code_Quality__empty_block_13_bad();

	void CWE398_Poor_Code_Quality__empty_block_14_bad();

	void CWE398_Poor_Code_Quality__empty_block_15_bad();

	void CWE398_Poor_Code_Quality__empty_block_16_bad();

	void CWE398_Poor_Code_Quality__empty_block_17_bad();

	void CWE398_Poor_Code_Quality__empty_block_18_bad();

	void CWE398_Poor_Code_Quality__empty_case_01_bad();

	void CWE398_Poor_Code_Quality__empty_case_02_bad();

	void CWE398_Poor_Code_Quality__empty_case_03_bad();

	void CWE398_Poor_Code_Quality__empty_case_04_bad();

	void CWE398_Poor_Code_Quality__empty_case_05_bad();

	void CWE398_Poor_Code_Quality__empty_case_06_bad();

	void CWE398_Poor_Code_Quality__empty_case_07_bad();

	void CWE398_Poor_Code_Quality__empty_case_08_bad();

	void CWE398_Poor_Code_Quality__empty_case_09_bad();

	void CWE398_Poor_Code_Quality__empty_case_10_bad();

	void CWE398_Poor_Code_Quality__empty_case_11_bad();

	void CWE398_Poor_Code_Quality__empty_case_12_bad();

	void CWE398_Poor_Code_Quality__empty_case_13_bad();

	void CWE398_Poor_Code_Quality__empty_case_14_bad();

	void CWE398_Poor_Code_Quality__empty_case_15_bad();

	void CWE398_Poor_Code_Quality__empty_case_16_bad();

	void CWE398_Poor_Code_Quality__empty_case_17_bad();

	void CWE398_Poor_Code_Quality__empty_case_18_bad();

	void CWE398_Poor_Code_Quality__empty_else_01_bad();

	void CWE398_Poor_Code_Quality__empty_else_02_bad();

	void CWE398_Poor_Code_Quality__empty_else_03_bad();

	void CWE398_Poor_Code_Quality__empty_else_04_bad();

	void CWE398_Poor_Code_Quality__empty_else_05_bad();

	void CWE398_Poor_Code_Quality__empty_else_06_bad();

	void CWE398_Poor_Code_Quality__empty_else_07_bad();

	void CWE398_Poor_Code_Quality__empty_else_08_bad();

	void CWE398_Poor_Code_Quality__empty_else_09_bad();

	void CWE398_Poor_Code_Quality__empty_else_10_bad();

	void CWE398_Poor_Code_Quality__empty_else_11_bad();

	void CWE398_Poor_Code_Quality__empty_else_12_bad();

	void CWE398_Poor_Code_Quality__empty_else_13_bad();

	void CWE398_Poor_Code_Quality__empty_else_14_bad();

	void CWE398_Poor_Code_Quality__empty_else_15_bad();

	void CWE398_Poor_Code_Quality__empty_else_16_bad();

	void CWE398_Poor_Code_Quality__empty_else_17_bad();

	void CWE398_Poor_Code_Quality__empty_else_18_bad();

	void CWE398_Poor_Code_Quality__empty_for_01_bad();

	void CWE398_Poor_Code_Quality__empty_for_02_bad();

	void CWE398_Poor_Code_Quality__empty_for_03_bad();

	void CWE398_Poor_Code_Quality__empty_for_04_bad();

	void CWE398_Poor_Code_Quality__empty_for_05_bad();

	void CWE398_Poor_Code_Quality__empty_for_06_bad();

	void CWE398_Poor_Code_Quality__empty_for_07_bad();

	void CWE398_Poor_Code_Quality__empty_for_08_bad();

	void CWE398_Poor_Code_Quality__empty_for_09_bad();

	void CWE398_Poor_Code_Quality__empty_for_10_bad();

	void CWE398_Poor_Code_Quality__empty_for_11_bad();

	void CWE398_Poor_Code_Quality__empty_for_12_bad();

	void CWE398_Poor_Code_Quality__empty_for_13_bad();

	void CWE398_Poor_Code_Quality__empty_for_14_bad();

	void CWE398_Poor_Code_Quality__empty_for_15_bad();

	void CWE398_Poor_Code_Quality__empty_for_16_bad();

	void CWE398_Poor_Code_Quality__empty_for_17_bad();

	void CWE398_Poor_Code_Quality__empty_for_18_bad();

	void CWE398_Poor_Code_Quality__empty_function_01_bad();

	void CWE398_Poor_Code_Quality__empty_if_01_bad();

	void CWE398_Poor_Code_Quality__empty_if_02_bad();

	void CWE398_Poor_Code_Quality__empty_if_03_bad();

	void CWE398_Poor_Code_Quality__empty_if_04_bad();

	void CWE398_Poor_Code_Quality__empty_if_05_bad();

	void CWE398_Poor_Code_Quality__empty_if_06_bad();

	void CWE398_Poor_Code_Quality__empty_if_07_bad();

	void CWE398_Poor_Code_Quality__empty_if_08_bad();

	void CWE398_Poor_Code_Quality__empty_if_09_bad();

	void CWE398_Poor_Code_Quality__empty_if_10_bad();

	void CWE398_Poor_Code_Quality__empty_if_11_bad();

	void CWE398_Poor_Code_Quality__empty_if_12_bad();

	void CWE398_Poor_Code_Quality__empty_if_13_bad();

	void CWE398_Poor_Code_Quality__empty_if_14_bad();

	void CWE398_Poor_Code_Quality__empty_if_15_bad();

	void CWE398_Poor_Code_Quality__empty_if_16_bad();

	void CWE398_Poor_Code_Quality__empty_if_17_bad();

	void CWE398_Poor_Code_Quality__empty_if_18_bad();

	void CWE398_Poor_Code_Quality__empty_while_01_bad();

	void CWE398_Poor_Code_Quality__empty_while_02_bad();

	void CWE398_Poor_Code_Quality__empty_while_03_bad();

	void CWE398_Poor_Code_Quality__empty_while_04_bad();

	void CWE398_Poor_Code_Quality__empty_while_05_bad();

	void CWE398_Poor_Code_Quality__empty_while_06_bad();

	void CWE398_Poor_Code_Quality__empty_while_07_bad();

	void CWE398_Poor_Code_Quality__empty_while_08_bad();

	void CWE398_Poor_Code_Quality__empty_while_09_bad();

	void CWE398_Poor_Code_Quality__empty_while_10_bad();

	void CWE398_Poor_Code_Quality__empty_while_11_bad();

	void CWE398_Poor_Code_Quality__empty_while_12_bad();

	void CWE398_Poor_Code_Quality__empty_while_13_bad();

	void CWE398_Poor_Code_Quality__empty_while_14_bad();

	void CWE398_Poor_Code_Quality__empty_while_15_bad();

	void CWE398_Poor_Code_Quality__empty_while_16_bad();

	void CWE398_Poor_Code_Quality__empty_while_17_bad();

	void CWE398_Poor_Code_Quality__empty_while_18_bad();

	void CWE398_Poor_Code_Quality__equals_01_bad();

	void CWE398_Poor_Code_Quality__equals_02_bad();

	void CWE398_Poor_Code_Quality__equals_03_bad();

	void CWE398_Poor_Code_Quality__equals_04_bad();

	void CWE398_Poor_Code_Quality__equals_05_bad();

	void CWE398_Poor_Code_Quality__equals_06_bad();

	void CWE398_Poor_Code_Quality__equals_07_bad();

	void CWE398_Poor_Code_Quality__equals_08_bad();

	void CWE398_Poor_Code_Quality__equals_09_bad();

	void CWE398_Poor_Code_Quality__equals_10_bad();

	void CWE398_Poor_Code_Quality__equals_11_bad();

	void CWE398_Poor_Code_Quality__equals_12_bad();

	void CWE398_Poor_Code_Quality__equals_13_bad();

	void CWE398_Poor_Code_Quality__equals_14_bad();

	void CWE398_Poor_Code_Quality__equals_15_bad();

	void CWE398_Poor_Code_Quality__equals_16_bad();

	void CWE398_Poor_Code_Quality__equals_17_bad();

	void CWE398_Poor_Code_Quality__equals_18_bad();

	void CWE398_Poor_Code_Quality__five_01_bad();

	void CWE398_Poor_Code_Quality__five_02_bad();

	void CWE398_Poor_Code_Quality__five_03_bad();

	void CWE398_Poor_Code_Quality__five_04_bad();

	void CWE398_Poor_Code_Quality__five_05_bad();

	void CWE398_Poor_Code_Quality__five_06_bad();

	void CWE398_Poor_Code_Quality__five_07_bad();

	void CWE398_Poor_Code_Quality__five_08_bad();

	void CWE398_Poor_Code_Quality__five_09_bad();

	void CWE398_Poor_Code_Quality__five_10_bad();

	void CWE398_Poor_Code_Quality__five_11_bad();

	void CWE398_Poor_Code_Quality__five_12_bad();

	void CWE398_Poor_Code_Quality__five_13_bad();

	void CWE398_Poor_Code_Quality__five_14_bad();

	void CWE398_Poor_Code_Quality__five_15_bad();

	void CWE398_Poor_Code_Quality__five_16_bad();

	void CWE398_Poor_Code_Quality__five_17_bad();

	void CWE398_Poor_Code_Quality__five_18_bad();

	void CWE398_Poor_Code_Quality__semicolon_01_bad();

	void CWE398_Poor_Code_Quality__semicolon_02_bad();

	void CWE398_Poor_Code_Quality__semicolon_03_bad();

	void CWE398_Poor_Code_Quality__semicolon_04_bad();

	void CWE398_Poor_Code_Quality__semicolon_05_bad();

	void CWE398_Poor_Code_Quality__semicolon_06_bad();

	void CWE398_Poor_Code_Quality__semicolon_07_bad();

	void CWE398_Poor_Code_Quality__semicolon_08_bad();

	void CWE398_Poor_Code_Quality__semicolon_09_bad();

	void CWE398_Poor_Code_Quality__semicolon_10_bad();

	void CWE398_Poor_Code_Quality__semicolon_11_bad();

	void CWE398_Poor_Code_Quality__semicolon_12_bad();

	void CWE398_Poor_Code_Quality__semicolon_13_bad();

	void CWE398_Poor_Code_Quality__semicolon_14_bad();

	void CWE398_Poor_Code_Quality__semicolon_15_bad();

	void CWE398_Poor_Code_Quality__semicolon_16_bad();

	void CWE398_Poor_Code_Quality__semicolon_17_bad();

	void CWE398_Poor_Code_Quality__semicolon_18_bad();

	/* END-AUTOGENERATED-C-BAD-FUNCTION-DECLARATIONS */
#endif // OMITBAD

#ifdef __cplusplus
} // end extern "C"
#endif

#ifdef __cplusplus
// declare C++ namespaces and good and bad functions

#ifndef OMITGOOD
	/* BEGIN-AUTOGENERATED-CPP-GOOD-FUNCTION-DECLARATIONS */

	/* END-AUTOGENERATED-CPP-GOOD-FUNCTION-DECLARATIONS */
#endif // OMITGOOD


#ifndef OMITBAD
	/* BEGIN-AUTOGENERATED-CPP-BAD-FUNCTION-DECLARATIONS */

	/* END-AUTOGENERATED-CPP-BAD-FUNCTION-DECLARATIONS */
#endif // OMITBAD


#endif // __cplusplus


#endif //  _TESTCASES_H
